import os
from typing import Literal

from openai import OpenAI
from pydantic import BaseModel

from bd.config import get_openai_key


class IntentClassification(BaseModel):
    intent: Literal[
        "screening",  # Ex: 'Hitta svenska teknikbolag'
        "single_stock_analysis",  # Ex: 'Vad tycker du om Evolution?'
        "portfolio_analysis",  # Ex: 'Hur ser min portfÃ¶lj ut?'
        "None",
    ]
    confidence: float  # LLM's sÃ¤kerhet
    reasoning: str  # FÃ¶rklaring till klassificeringen


def classify_prompt(user_prompt: str) -> IntentClassification:
    client = OpenAI(api_key=get_openai_key())
    system_prompt = """
                        Du Ã¤r en AI-agent som klassificerar vad anvÃ¤ndaren vill gÃ¶ra i en investeringsassistent.

                        Du ska returnera en JSON med fÃ¤ltet "intent" som kan vara ett av fÃ¶ljande:

                        - "screening" â€” om anvÃ¤ndaren vill hitta bolag utifrÃ¥n filter som bransch, land, sektor eller nyckeltal.
                        - "single_stock_analysis" â€” om anvÃ¤ndaren vill analysera ett enskilt bolag (t.ex. frÃ¥ga om en viss aktie).
                        - "portfolio_analysis" â€” om anvÃ¤ndaren vill analysera en portfÃ¶lj eller flera innehav (t.ex. frÃ¥ga om riskspridning eller omdÃ¶me om flera aktier).
                        - "general_investment_advice" â€” om anvÃ¤ndaren vill ha allmÃ¤nna investeringsrÃ¥d eller strategier.
                        Returnera Ã¤ven "confidence" (en float mellan 0 och 1) som anger hur sÃ¤ker du Ã¤r pÃ¥ klassificeringen, samt "reasoning" dÃ¤r du kort fÃ¶rklarar varfÃ¶r du valde just denna intent.
                        Om confidence inte Ã¤r Ã¶ver 50 %, returnera "None" som intent.
                        Returnera en korrekt formaterad JSON enligt modellen samt din rationale till klassificeringen.
                    """
    response = client.responses.parse(
        model="gpt-4.1",
        temperature=0.0,
        input=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt},
        ],
        text_format=IntentClassification,
    )
    print(
        f"\nğŸ§  Klassificering: {response.output_parsed.intent} (ğŸ“ˆ confidence: {response.output_parsed.confidence})"
    )
    print(f"ğŸ§© Resonemang: {response.output_parsed.reasoning}")
    return response.output_parsed.intent
