# TODO - f√∂rs√∂k testa dig fram hur tools anropas och f√∂rs√∂k se om vi kan f√• agenten
# att bara anv√§nda tools om de verkligen beh√∂ver. Dvs inte alltid anropa sina tools.
# Du beh√∂ver f√∂rst√• vad agenten g√∂r i detalj.

# Om det √§r en lista s√• anv√§nd[0] etc,
# om det √§r en dict s√• anv√§nd .get("key") etc.,
# om det √§r en ResponseModel tex s√• anv√§nd .output eller .all_messages() etc. f√∂r att f√• fram attribut eller metoder som kalssen har.
# Anv√§nd print(dir(...)) f√∂r att se vad som finns.


from __future__ import annotations

from typing import TypedDict

import pandas as pd
from pydantic import BaseModel
from pydantic_ai import Agent, RunContext
from pydantic_ai.models.openai import OpenAIChatModel
from pydantic_ai.messages import (
    ModelResponse,
    ModelRequest,
    ToolCallPart,
    BuiltinToolCallPart,
    ToolCallPartDelta,
    BuiltinToolReturnPart,
)

from bd.bd_metadata import get_global_instruments_info

""" Pydantic Agent som tolkar user prompt till vilket bolag som ska analyseras"""


class CompanyInterpretation(BaseModel):
    insId: int
    name: str
    ticker: str


class Deps(TypedDict):
    names: list[str]


def get_global_instruments_df() -> pd.DataFrame:
    data = get_global_instruments_info()
    instruments = data["instruments"]
    df_raw = pd.DataFrame(instruments)
    df_new = df_raw.drop(
        columns=[
            "urlName",
            "instrument",
            "isin",
            "yahoo",
            "sectorId",
            "countryId",
            "marketId",
            "branchId",
            "listingDate",
            "stockPriceCurrency",
            "reportCurrency",
        ]
    )
    return df_new.copy()


name_agent = Agent(
    model=OpenAIChatModel("gpt-4o"),
    deps_type=Deps,
    output_type=CompanyInterpretation,
    system_prompt=(
        "V√§lj det mest l√§mpliga bolaget √•t anv√§ndaren, men du f√•r ENDAST "
        "returnera ett bolag som finns i listan i Deps."
        "Du m√•ste anv√§nda toolet lookup_id_ticker_from_name f√∂r att validera att namnet finns."
        "Returnera EXAKT ett till√•tet namn."
    ),  # n√§r jag byter "m√•ste" till "f√•r inte" s√• √§ndras om tool anv√§nds eller inte
)


@name_agent.tool
def lookup_id_ticker_from_name(ctx: RunContext[Deps]) -> CompanyInterpretation:
    """
    Deterministisk lookup i names list (namnet kommer fr√•n listan ‚Üí b√∂r matcha exakt).
    Hanterar ev. dubbletter genom att ta f√∂rsta raden.
    """
    # print("ctx names", ctx.deps.get("names"))
    # for i in names:
    #     if i.lower() == name.lower():
    #         df = get_global_instruments_df()
    #         row = df[df["name"].str.lower() == name.lower()].iloc[0]
    #         return CompanyInterpretation(
    #             insId=row["insId"], name=row["name"], ticker=row["ticker"]
    #         )
    return CompanyInterpretation(insId=1, name="Test", ticker="TST")


@name_agent.tool
def print_names(ctx: RunContext[Deps]) -> str:
    print("hej")


def run_name_interpretation_agent(user_prompt: str):
    """
    1) L√•t agenten v√§lja ETT namn fr√•n till√•ten lista.
    2) Sl√• upp insId/ticker deterministiskt i DF.
    3) Returnera CompanyInterpretation.
    """
    print(f"\nüó®Ô∏è  Fr√•ga till name-interpretation-agenten: {user_prompt}")
    df = get_global_instruments_df()
    names = df["name"].values.tolist()[:10]
    print("names", names)
    result = name_agent.run_sync(user_prompt, deps={"names": names})
    # print(dir(name_agent))
    print("\n==== RAW RESPONSE ====")
    print(result)
    print("\n=== OUTPUT ===")
    print(result.output)
    print("\n=== ALL MESSAGES ===")
    print(result.all_messages())
    print("\n==== TOOLS ====")
    for i in result.all_messages()[1].parts:
        print(i.tool_name)
    # company = lookup_id_ticker_from_name(result.output, df)
    # print("efter lookup ticker id", company)
    return None
    # return company
